..
 paragraph: Examples, Attributes, References
 item: Parameters, Returns, Yields
 sphinxstrong: See Also
 sphinxadmonition: Notes

*********
독스트링
*********

파이썬 소스에서 사용할 수 있는 세 가지 형식의 독스트링(docstring)이 있다.

* 스핑크스 (reST)
* 구글
* NumPyDoc

이 중에서 NumPyDoc 형식을 사용해야 한다.
스핑크스 형식 또한 사용할 수 있지만 명시적 마크업(directive)의 사용은 제한될 수 있다.

또한 다음 사항들을 유념해야 한다.

* 일반 주석의 용도로 :index:`독스트링` (:index:`DocString`)을 쓰지 않아야 한다. 그 두 가지 마크업들을 뒤섞어 쓰는 것도 피해야 한다.
  ::

    ```
    # blah blah
    # blah blah
    ```

* 독스트링 안에 HTML 태그를 쓰지 않아야 한다.
* 불필요한 들여쓰기와 줄바꿈을 삼가야 한다.
* NumpyDoc 형식의 텍스트에서는 파이썬의 들여쓰기 규칙을 따라야 한다. (4 자)

제목
=====

파이썬 모듈과 클래스에 대한 제목이 스핑크스에 의해 자동으로 만들어지므로 독스트링에서 제목 마크업을 사용하는 것은 불필요하다.

::

  # module_name.py
  # -*- coding: UTF-8 -*-
  """
  `module_name` provides:

  1. blah
  #. blah
  #. blah

  """

함수
=====

함수에 대한 설명은 패러미터, 결과, 예제 등을 포함한다.

::

  Parameters
  ----------
  introductory sentences if needed.
  x : type
  ␣␣␣␣description

  ␣␣␣␣description
  y : type
  ␣␣␣␣description

  ␣␣␣␣* item
  ␣␣␣␣* item

여기에서 ``Parameters``\ 는 (제목이 아니라) 매개변수에 대한 설명을 위한 마크업으로서 기능한다.
``Attributes``, ``Returns``, ``Yields``, ``Examples``, ``Notes``, ``See Also``\ 가 같은 성격의 마크업이다.

정의 목록이 Parameters 마크업을 뒤따른다. 그 형식은 reST와 다소 다르다.

* 매개변수 항목과 콜론 사이에 공백을 두어야 한다.
* 콜론 다음에 변수 유형을 명시한다.
* 그 다음 줄에 4 자만큼 들여쓰고 상세를 추가한다.
* 빈 줄이 없는 줄나눔은 무시된다.
* 정의 목록의 중첩은 가능하지 않다. 어떤 항목에서 하위 목록의 사용이 필요하다면 비순서 목록 또는 순서 목록의 형식을 사용해야 한다.

예제에서 코드를 포함하는 모든 줄은 ``>>>`` 또는 ``...``\ 로 시작해야 한다.

::

  Examples
  --------
  >>> import numpy as np
  >>> import pyFlutter as pf

수식
====

reST 문서에서와는 다르게, 파이썬 이스케이프 코드와 동일한 문자로 시작하는 수식 명령에 이스케이프 문자를 추가해야 한다.

::

  """
  .. math::
  ␣␣␣␣f_a=f_m\left(\\frac{V_a}{V_m}\\right)\left(\\frac{L_m}{L_a}\\right) \\\\
  ␣␣␣␣x_{k+1}  & = A x_k + K e_k \\\\
  ␣␣␣␣y_k      & = C x_k + e_k

  """

다른 방법은 날 문자열 (raw string)로 만드는 것이다.

::

  r"""
  .. math::

    f_a=f_m\left(\frac{V_a}{V_m}\right)\left(\frac{L_m}{L_a}\right)

  """
